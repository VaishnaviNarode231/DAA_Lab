#include <iostream>
#include <vector>
using namespace std;

// Function to find the maximum profit
int maxProfit(const vector<int> &prices) {
    int n = prices.size();
    int profit = 0, currentDay = n - 1;

    // Start from the last day
    while (currentDay > 0) {
        int day = currentDay - 1;

        // Traverse and keep adding the profit until a day with
        // price of stock higher than currentDay is obtained
        while (day >= 0 && (prices[currentDay] > prices[day])) {
            profit += (prices[currentDay] - prices[day]);
            day--;
        }

        // Set this day as currentDay with maximum cost of stock currently
        currentDay = day;
    }

    // Return the profit
    return profit;
}

int main() {
    int N;

    // Input the number of days
    cout << "Enter the number of days: ";
    cin >> N;

    vector<int> prices(N);

    // Input the prices of the stock for each day
    cout << "Enter the stock prices: ";
    for (int i = 0; i < N; i++) {
        cin >> prices[i];
    }

    // Function Call
    cout << "Maximum profit: " << maxProfit(prices) << endl;

    return 0;
}
